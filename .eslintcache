[{"/Users/cade.capener/code/kanban-react/src/components/board.tsx":"1","/Users/cade.capener/code/kanban-react/src/components/column.tsx":"2","/Users/cade.capener/code/kanban-react/src/components/modalForm.tsx":"3","/Users/cade.capener/code/kanban-react/src/App.tsx":"4","/Users/cade.capener/code/kanban-react/src/index.tsx":"5","/Users/cade.capener/code/kanban-react/src/reportWebVitals.ts":"6","/Users/cade.capener/code/kanban-react/src/components/editForm.tsx":"7","/Users/cade.capener/code/kanban-react/src/components/boardSelect.tsx":"8","/Users/cade.capener/code/kanban-react/src/components/SingleBoardView.tsx":"9","/Users/cade.capener/code/kanban-react/src/components/addBoardModal.tsx":"10"},{"size":3601,"mtime":1617864458552,"results":"11","hashOfConfig":"12"},{"size":2366,"mtime":1619071025667,"results":"13","hashOfConfig":"12"},{"size":2093,"mtime":1619070884509,"results":"14","hashOfConfig":"12"},{"size":1253,"mtime":1619496026214,"results":"15","hashOfConfig":"12"},{"size":774,"mtime":1614143462575,"results":"16","hashOfConfig":"12"},{"size":425,"mtime":1613666686541,"results":"17","hashOfConfig":"12"},{"size":2151,"mtime":1619071011024,"results":"18","hashOfConfig":"12"},{"size":966,"mtime":1619496069653,"results":"19","hashOfConfig":"12"},{"size":546,"mtime":1619073321423,"results":"20","hashOfConfig":"12"},{"size":1620,"mtime":1619496091288,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"b7z50n",{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/cade.capener/code/kanban-react/src/components/board.tsx",["47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Column from \"./column\";\nimport axios from \"axios\";\nimport ModalForm from \"./modalForm\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\n\ntype ColumnCard = {\n  id: number;\n  column: string;\n  title: string;\n};\n\nfunction Board() {\n  const [backlogColumnData, setBacklogColumnData] = useState([]);\n  const [toDoColumnData, setToDoColumnData] = useState([]);\n  const [doingColumnData, setDoingColumnData] = useState([]);\n  const [doneColumnData, setDoneColumnData] = useState([]);\n\n  const { id }: any = useParams();\n\n  const getCards = async (boardId: number): Promise<any> => {\n    const response = await axios.get(`http://localhost:3001/api/boards/${boardId}/cards`);\n    return response.data;\n  };\n\n  const setCardsState = (cards: any): void => {\n    setBacklogColumnData(cards.filter((card: ColumnCard) => card.column.toUpperCase() === \"BACKLOG\"));\n    setToDoColumnData(cards.filter((card: ColumnCard) => card.column.toUpperCase() === \"TODO\"));\n    setDoingColumnData(cards.filter((card: ColumnCard) => card.column.toUpperCase() === \"DOING\"));\n    setDoneColumnData(cards.filter((card: ColumnCard) => card.column.toUpperCase() === \"DONE\"));\n  };\n\n  const refreshBoard = async (boardId: number): Promise<void> => {\n    const cards = await getCards(boardId);\n    setCardsState(cards);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await refreshBoard(id);\n    };\n    fetchData();\n  }, []);\n\n  const backlog = \"Backlog\";\n  const toDo = \"ToDo\";\n  const doing = \"Doing\";\n  const done = \"Done\";\n\n  const onDragOver = (e: any) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const onDrop = async (e: any, columnDropName: string) => {\n    const cardId = e.dataTransfer.getData(\"cardId\");\n    const cardTitle = e.dataTransfer.getData(\"cardTitle\");\n    const cardDescription = e.dataTransfer.getData(\"cardDescription\");\n    await axios.put(`http://localhost:3001/api/boards/${id}/cards/${cardId}`, {\n      title: cardTitle,\n      column: columnDropName,\n      description: cardDescription,\n    });\n    await refreshBoard(id);\n  };\n  return (\n    <Container>\n      <Paper>\n        <Grid container spacing={3}>\n          <Grid item xs={3} onDragOver={(e: any) => onDragOver(e)} onDrop={(e: any) => onDrop(e, backlog)}>\n            <h2>Backlog</h2>\n            <Column column={backlog} cards={backlogColumnData} refreshBoard={refreshBoard} />\n            <ModalForm column={backlog} refreshBoard={refreshBoard} />\n          </Grid>\n          <Grid item xs={3} onDragOver={(e: any) => onDragOver(e)} onDrop={(e: any) => onDrop(e, toDo)}>\n            <h2>ToDo</h2>\n            <Column column={toDo} cards={toDoColumnData} refreshBoard={refreshBoard} />\n            <ModalForm column={toDo} refreshBoard={refreshBoard} />\n          </Grid>\n          <Grid item xs={3} onDragOver={(e: any) => onDragOver(e)} onDrop={(e: any) => onDrop(e, doing)}>\n            <h2>Doing</h2>\n            <Column column={doing} cards={doingColumnData} refreshBoard={refreshBoard} />\n            <ModalForm column={doing} refreshBoard={refreshBoard} />\n          </Grid>\n          <Grid item xs={3} onDragOver={(e: any) => onDragOver(e)} onDrop={(e: any) => onDrop(e, done)}>\n            <h2>Done</h2>\n            <Column column={done} cards={doneColumnData} refreshBoard={refreshBoard} />\n            <ModalForm column={done} refreshBoard={refreshBoard} />\n          </Grid>\n        </Grid>\n      </Paper>\n      <h3>Board Id: {id}</h3>\n    </Container>\n  );\n}\n\nexport default Board;\n","/Users/cade.capener/code/kanban-react/src/components/column.tsx",["61","62","63","64","65"],"import React from \"react\";\nimport axios from \"axios\";\nimport EditForm from \"./editForm\";\n\nimport { Container, Card, Button, Typography } from \"@material-ui/core\";\n\ntype ColumnCard = {\n  _id: number;\n  title: string;\n  description: string;\n  boardId: number;\n};\n\n//I know I shouldn't set the type to any but what do I set it as?\ninterface Props {\n  column: string;\n  cards: ColumnCard[];\n  refreshBoard(boardId: number): Promise<void>;\n}\n\nfunction Column(props: Props) {\n  const { column, cards } = props;\n  // const taskList = ['Backlog', 'ToDo', 'Doing', 'Done']\n  const erase = async (id: string | number | null | undefined, boardId: number): Promise<void> => {\n    await axios.delete(`http://localhost:3001/api/boards/${boardId}/cards/${id}`);\n    await props.refreshBoard(boardId);\n  };\n\n  const onDragStart = (\n    e: { dataTransfer: { setData: (arg0: string, arg1: any) => void } },\n    cardTitle: React.ReactNode,\n    cardId: string | number,\n    cardDescription: React.ReactNode\n  ) => {\n    e.dataTransfer.setData(\"cardTitle\", cardTitle);\n    e.dataTransfer.setData(\"cardId\", cardId);\n    e.dataTransfer.setData(\"cardDescription\", cardDescription);\n  };\n\n  return (\n    <Container>\n      {cards.map((card: { _id: string | number; title: React.ReactNode; boardId: number; description: string }) => {\n        return (\n          <Card\n            style={{ margin: \"15px\", padding: \"10px 0\", cursor: \"pointer\" }}\n            variant=\"outlined\"\n            key={card._id}\n            draggable\n            onDragStart={(e: any) => {\n              onDragStart(e, card.title, card._id, card.description);\n            }}\n          >\n            <Typography variant=\"subtitle1\" style={{ margin: \"0 10px\" }}>\n              {card.title}\n            </Typography>\n            <Typography variant=\"subtitle1\" style={{ margin: \"0 10px\" }}>\n              {card.description}\n            </Typography>\n            <Button\n              color=\"secondary\"\n              size=\"small\"\n              onClick={(event: React.MouseEvent<HTMLElement>) => {\n                erase(card._id, card.boardId);\n              }}\n            >\n              Delete\n            </Button>\n            <EditForm id={card._id} boardId={card.boardId} column={props.column} refreshBoard={props.refreshBoard} />\n          </Card>\n        );\n      })}\n    </Container>\n  );\n}\n\nexport default Column;\n","/Users/cade.capener/code/kanban-react/src/components/modalForm.tsx",["66","67","68","69"],"/Users/cade.capener/code/kanban-react/src/App.tsx",["70","71"],"/Users/cade.capener/code/kanban-react/src/index.tsx",[],"/Users/cade.capener/code/kanban-react/src/reportWebVitals.ts",["72"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/cade.capener/code/kanban-react/src/components/editForm.tsx",["73"],"import React, { useState, ReactText } from \"react\";\nimport axios from \"axios\";\nimport { Dialog, DialogActions, DialogTitle, TextField, Button, ButtonGroup, FormGroup } from \"@material-ui/core\";\n\ninterface Props {\n  id: ReactText;\n  boardId: number;\n  column: string;\n  refreshBoard(boardId: number): Promise<void>;\n}\n\nfunction EditForm(props: Props) {\n  const [show, setShow] = useState(false);\n  const [titleValue, setTitleValue] = useState(\"\");\n  const [descriptionValue, setDescriptionValue] = useState(\"\");\n\n  const handleClose = () => {\n    setTitleValue(\"\");\n    setDescriptionValue(\"\");\n    setShow(false);\n  };\n  const handleShow = () => setShow(true);\n\n  const updateCard = async (): Promise<void> => {\n    const updatedCard = {\n      title: titleValue,\n      description: descriptionValue,\n      column: props.column,\n    };\n    await axios.put(`http://localhost:3001/api/boards/${props.boardId}/cards/${props.id}`, updatedCard);\n    await props.refreshBoard(props.boardId);\n    handleClose();\n  };\n\n  return (\n    <>\n      <ButtonGroup color=\"primary\" size=\"small\" onClick={handleShow}>\n        <Button>Edit</Button>\n      </ButtonGroup>\n\n      <Dialog open={show} onClose={handleClose}>\n        <DialogTitle>Edit Card</DialogTitle>\n        <DialogActions style={{ padding: \"15px\" }}>\n          <FormGroup>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              type=\"title\"\n              label=\"New Title\"\n              value={titleValue}\n              onChange={(e) => setTitleValue(e.target.value)}\n            />\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"description\"\n              type=\"description\"\n              label=\"New Description\"\n              value={descriptionValue}\n              onChange={(e) => setDescriptionValue(e.target.value)}\n            />\n          </FormGroup>\n        </DialogActions>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={updateCard}>Edit</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n\nexport default EditForm;\n","/Users/cade.capener/code/kanban-react/src/components/boardSelect.tsx",["74","75","76","77"],"/Users/cade.capener/code/kanban-react/src/components/SingleBoardView.tsx",["78","79","80"],"import React from \"react\";\nimport { BrowserRouter as Link, useParams } from \"react-router-dom\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport Board from \"./board\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst SingleBoardView: React.FC = () => {\n  const { id }: any = useParams();\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <div style={{ margin: \"100px\" }}></div>\n        <Board />\n      </ThemeProvider>\n    </div>\n  );\n};\nexport default SingleBoardView;\n","/Users/cade.capener/code/kanban-react/src/components/addBoardModal.tsx",["81","82","83","84","85"],{"ruleId":"86","severity":1,"message":"87","line":14,"column":1,"nodeType":"88","messageId":"89","endLine":14,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":20,"column":17,"nodeType":"92","messageId":"93","endLine":20,"endColumn":20,"suggestions":"94"},{"ruleId":"90","severity":1,"message":"91","line":22,"column":53,"nodeType":"92","messageId":"93","endLine":22,"endColumn":56,"suggestions":"95"},{"ruleId":"90","severity":1,"message":"91","line":27,"column":33,"nodeType":"92","messageId":"93","endLine":27,"endColumn":36,"suggestions":"96"},{"ruleId":"90","severity":1,"message":"91","line":51,"column":26,"nodeType":"92","messageId":"93","endLine":51,"endColumn":29,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"91","line":56,"column":28,"nodeType":"92","messageId":"93","endLine":56,"endColumn":31,"suggestions":"98"},{"ruleId":"90","severity":1,"message":"91","line":71,"column":45,"nodeType":"92","messageId":"93","endLine":71,"endColumn":48,"suggestions":"99"},{"ruleId":"90","severity":1,"message":"91","line":71,"column":80,"nodeType":"92","messageId":"93","endLine":71,"endColumn":83,"suggestions":"100"},{"ruleId":"90","severity":1,"message":"91","line":76,"column":45,"nodeType":"92","messageId":"93","endLine":76,"endColumn":48,"suggestions":"101"},{"ruleId":"90","severity":1,"message":"91","line":76,"column":80,"nodeType":"92","messageId":"93","endLine":76,"endColumn":83,"suggestions":"102"},{"ruleId":"90","severity":1,"message":"91","line":81,"column":45,"nodeType":"92","messageId":"93","endLine":81,"endColumn":48,"suggestions":"103"},{"ruleId":"90","severity":1,"message":"91","line":81,"column":80,"nodeType":"92","messageId":"93","endLine":81,"endColumn":83,"suggestions":"104"},{"ruleId":"90","severity":1,"message":"91","line":86,"column":45,"nodeType":"92","messageId":"93","endLine":86,"endColumn":48,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"91","line":86,"column":80,"nodeType":"92","messageId":"93","endLine":86,"endColumn":83,"suggestions":"106"},{"ruleId":"86","severity":1,"message":"87","line":21,"column":1,"nodeType":"88","messageId":"89","endLine":21,"endColumn":30},{"ruleId":"107","severity":1,"message":"108","line":22,"column":11,"nodeType":"109","messageId":"110","endLine":22,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":30,"column":56,"nodeType":"92","messageId":"93","endLine":30,"endColumn":59,"suggestions":"111"},{"ruleId":"90","severity":1,"message":"91","line":49,"column":30,"nodeType":"92","messageId":"93","endLine":49,"endColumn":33,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":62,"column":25,"nodeType":"109","messageId":"110","endLine":62,"endColumn":61},{"ruleId":"86","severity":1,"message":"87","line":6,"column":1,"nodeType":"88","messageId":"89","endLine":6,"endColumn":31},{"ruleId":"86","severity":1,"message":"114","line":6,"column":20,"nodeType":"109","messageId":"115","endLine":6,"endColumn":30},{"ruleId":"90","severity":1,"message":"91","line":6,"column":27,"nodeType":"92","messageId":"93","endLine":6,"endColumn":30,"suggestions":"116"},{"ruleId":"90","severity":1,"message":"91","line":11,"column":17,"nodeType":"92","messageId":"93","endLine":11,"endColumn":20,"suggestions":"117"},{"ruleId":"86","severity":1,"message":"87","line":9,"column":1,"nodeType":"88","messageId":"89","endLine":9,"endColumn":15},{"ruleId":"90","severity":1,"message":"91","line":12,"column":39,"nodeType":"92","messageId":"93","endLine":12,"endColumn":42,"suggestions":"118"},{"ruleId":"86","severity":1,"message":"87","line":3,"column":25,"nodeType":"119","messageId":"89","endLine":3,"endColumn":57},{"ruleId":"86","severity":1,"message":"87","line":12,"column":1,"nodeType":"88","messageId":"89","endLine":12,"endColumn":32},{"ruleId":"86","severity":1,"message":"87","line":13,"column":1,"nodeType":"88","messageId":"89","endLine":13,"endColumn":34},{"ruleId":"86","severity":1,"message":"114","line":13,"column":22,"nodeType":"109","messageId":"115","endLine":13,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":13,"column":30,"nodeType":"92","messageId":"93","endLine":13,"endColumn":33,"suggestions":"120"},{"ruleId":"90","severity":1,"message":"91","line":18,"column":57,"nodeType":"92","messageId":"93","endLine":18,"endColumn":60,"suggestions":"121"},{"ruleId":"107","severity":1,"message":"122","line":2,"column":27,"nodeType":"109","messageId":"110","endLine":2,"endColumn":31},{"ruleId":"107","severity":1,"message":"123","line":13,"column":11,"nodeType":"109","messageId":"110","endLine":13,"endColumn":13},{"ruleId":"90","severity":1,"message":"91","line":13,"column":17,"nodeType":"92","messageId":"93","endLine":13,"endColumn":20,"suggestions":"124"},{"ruleId":"107","severity":1,"message":"125","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"87","line":5,"column":1,"nodeType":"88","messageId":"89","endLine":5,"endColumn":35},{"ruleId":"86","severity":1,"message":"114","line":5,"column":24,"nodeType":"109","messageId":"115","endLine":5,"endColumn":34},{"ruleId":"90","severity":1,"message":"91","line":5,"column":31,"nodeType":"92","messageId":"93","endLine":5,"endColumn":34,"suggestions":"126"},{"ruleId":"107","severity":1,"message":"127","line":8,"column":10,"nodeType":"109","messageId":"110","endLine":8,"endColumn":26},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["128","129"],["130","131"],["132","133"],["134","135"],["136","137"],["138","139"],["140","141"],["142","143"],["144","145"],["146","147"],["148","149"],["150","151"],["152","153"],"@typescript-eslint/no-unused-vars","'column' is assigned a value but never used.","Identifier","unusedVar",["154","155"],["156","157"],"'event' is defined but never used.","Argument 'props' should be typed with a non-any type.","anyTypedArg",["158","159"],["160","161"],["162","163"],"ArrowFunctionExpression",["164","165"],["166","167"],"'Link' is defined but never used.","'id' is assigned a value but never used.",["168","169"],"'ReactText' is defined but never used.",["170","171"],"'descriptionValue' is assigned a value but never used.",{"messageId":"172","fix":"173","desc":"174"},{"messageId":"175","fix":"176","desc":"177"},{"messageId":"172","fix":"178","desc":"174"},{"messageId":"175","fix":"179","desc":"177"},{"messageId":"172","fix":"180","desc":"174"},{"messageId":"175","fix":"181","desc":"177"},{"messageId":"172","fix":"182","desc":"174"},{"messageId":"175","fix":"183","desc":"177"},{"messageId":"172","fix":"184","desc":"174"},{"messageId":"175","fix":"185","desc":"177"},{"messageId":"172","fix":"186","desc":"174"},{"messageId":"175","fix":"187","desc":"177"},{"messageId":"172","fix":"188","desc":"174"},{"messageId":"175","fix":"189","desc":"177"},{"messageId":"172","fix":"190","desc":"174"},{"messageId":"175","fix":"191","desc":"177"},{"messageId":"172","fix":"192","desc":"174"},{"messageId":"175","fix":"193","desc":"177"},{"messageId":"172","fix":"194","desc":"174"},{"messageId":"175","fix":"195","desc":"177"},{"messageId":"172","fix":"196","desc":"174"},{"messageId":"175","fix":"197","desc":"177"},{"messageId":"172","fix":"198","desc":"174"},{"messageId":"175","fix":"199","desc":"177"},{"messageId":"172","fix":"200","desc":"174"},{"messageId":"175","fix":"201","desc":"177"},{"messageId":"172","fix":"202","desc":"174"},{"messageId":"175","fix":"203","desc":"177"},{"messageId":"172","fix":"204","desc":"174"},{"messageId":"175","fix":"205","desc":"177"},{"messageId":"172","fix":"206","desc":"174"},{"messageId":"175","fix":"207","desc":"177"},{"messageId":"172","fix":"208","desc":"174"},{"messageId":"175","fix":"209","desc":"177"},{"messageId":"172","fix":"210","desc":"174"},{"messageId":"175","fix":"211","desc":"177"},{"messageId":"172","fix":"212","desc":"174"},{"messageId":"175","fix":"213","desc":"177"},{"messageId":"172","fix":"214","desc":"174"},{"messageId":"175","fix":"215","desc":"177"},{"messageId":"172","fix":"216","desc":"174"},{"messageId":"175","fix":"217","desc":"177"},{"messageId":"172","fix":"218","desc":"174"},{"messageId":"175","fix":"219","desc":"177"},"suggestUnknown",{"range":"220","text":"221"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"220","text":"222"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"223","text":"221"},{"range":"223","text":"222"},{"range":"224","text":"221"},{"range":"224","text":"222"},{"range":"225","text":"221"},{"range":"225","text":"222"},{"range":"226","text":"221"},{"range":"226","text":"222"},{"range":"227","text":"221"},{"range":"227","text":"222"},{"range":"228","text":"221"},{"range":"228","text":"222"},{"range":"229","text":"221"},{"range":"229","text":"222"},{"range":"230","text":"221"},{"range":"230","text":"222"},{"range":"231","text":"221"},{"range":"231","text":"222"},{"range":"232","text":"221"},{"range":"232","text":"222"},{"range":"233","text":"221"},{"range":"233","text":"222"},{"range":"234","text":"221"},{"range":"234","text":"222"},{"range":"235","text":"221"},{"range":"235","text":"222"},{"range":"236","text":"221"},{"range":"236","text":"222"},{"range":"237","text":"221"},{"range":"237","text":"222"},{"range":"238","text":"221"},{"range":"238","text":"222"},{"range":"239","text":"221"},{"range":"239","text":"222"},{"range":"240","text":"221"},{"range":"240","text":"222"},{"range":"241","text":"221"},{"range":"241","text":"222"},{"range":"242","text":"221"},{"range":"242","text":"222"},{"range":"243","text":"221"},{"range":"243","text":"222"},[611,614],"unknown","never",[683,686],[848,851],[1655,1658],[1747,1750],[2297,2300],[2332,2335],[2617,2620],[2652,2655],[2922,2925],[2957,2960],[3232,3235],[3267,3270],[871,874],[1527,1530],[256,259],[439,442],[443,446],[347,350],[531,534],[330,333],[225,228]]